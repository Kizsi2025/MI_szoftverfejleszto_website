// server/routes/auth.js
const express = require('express');
const router = express.Router();
const authController = require('../controllers/authController');
const { authenticateToken } = require('../middleware/auth');
const { registerValidation, loginValidation } = require('../middleware/validation');
const rateLimit = require('express-rate-limit');

// Rate limiting
const authLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 perc
  max: 5, // max 5 prÃ³bÃ¡lkozÃ¡s
  message: {
    message: 'TÃºl sok bejelentkezÃ©si kÃ­sÃ©rlet. PrÃ³bÃ¡ld Ãºjra 15 perc mÃºlva.',
    error: 'TOO_MANY_ATTEMPTS'
  },
  standardHeaders: true,
  legacyHeaders: false
});

const registerLimiter = rateLimit({
  windowMs: 60 * 60 * 1000, // 1 Ã³ra
  max: 3, // max 3 regisztrÃ¡ciÃ³
  message: {
    message: 'TÃºl sok regisztrÃ¡ciÃ³s kÃ­sÃ©rlet. PrÃ³bÃ¡ld Ãºjra 1 Ã³ra mÃºlva.',
    error: 'TOO_MANY_REGISTRATIONS'
  }
});

// RegisztrÃ¡ciÃ³
router.post('/register', registerLimiter, registerValidation, authController.register);

// BejelentkezÃ©s
router.post('/login', authLimiter, loginValidation, authController.login);

// Profil lekÃ©rdezÃ©se (vÃ©dett)
router.get('/profile', authenticateToken, authController.getProfile);

// JelszÃ³ mÃ³dosÃ­tÃ¡s (vÃ©dett)
router.put('/change-password', 
  authenticateToken,
  [
    require('express-validator').body('currentPassword').notEmpty().withMessage('Jelenlegi jelszÃ³ szÃ¼ksÃ©ges'),
    require('express-validator').body('newPassword').isLength({ min: 6 }).withMessage('Az Ãºj jelszÃ³ legalÃ¡bb 6 karakter hosszÃº kell legyen'),
    require('../middleware/validation').handleValidationErrors
  ],
  authController.changePassword
);

// Token Ã©rvÃ©nyessÃ©g ellenÅ‘rzÃ©se (vÃ©dett)
router.get('/verify', authenticateToken, authController.verifyToken);

// KijelentkezÃ©s (kliens oldali token tÃ¶rlÃ©s)
router.post('/logout', (req, res) => {
  res.json({
    message: 'Sikeres kijelentkezÃ©s! ViszlÃ¡t! ğŸ‘‹',
    success: true
  });
});

module.exports = router;
